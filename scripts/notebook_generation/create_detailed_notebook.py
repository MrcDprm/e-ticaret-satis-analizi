import json

# Detaylı analiz notebook yapısı
notebook = {
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# E-Ticaret Satış Analizi - Detaylı Analiz ve Sonuçlar\n",
                "\n",
                "Bu notebook'ta e-ticaret verilerini detaylı analiz edip gerçek sonuçları göreceğiz."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Gerekli kütüphaneleri import edelim\n",
                "import pandas as pd\n",
                "import numpy as np\n",
                "import matplotlib.pyplot as plt\n",
                "import seaborn as sns\n",
                "import plotly.express as px\n",
                "import plotly.graph_objects as go\n",
                "from plotly.subplots import make_subplots\n",
                "\n",
                "# Türkçe karakter desteği\n",
                "plt.rcParams['font.family'] = ['DejaVu Sans']\n",
                "plt.style.use('seaborn-v0_8')\n",
                "\n",
                "print(\"Kütüphaneler başarıyla import edildi!\")"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Veri setini yükle\n",
                "df = pd.read_csv('../data/raw/ecommerce_sales.csv')\n",
                "print(\"Veri seti yüklendi!\")\n",
                "print(f\"Satır sayısı: {len(df)}\")\n",
                "print(f\"Sütun sayısı: {len(df.columns)}\")\n",
                "print(f\"Toplam satış: {df['total_amount'].sum():,.2f} TL\")\n",
                "df.head()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Kategori bazında detaylı analiz\n",
                "category_analysis = df.groupby('category').agg({\n",
                "    'total_amount': ['sum', 'mean', 'count'],\n",
                "    'quantity': 'sum',\n",
                "    'rating': 'mean'\n",
                "}).round(2)\n",
                "\n",
                "category_analysis.columns = ['Toplam_Satis', 'Ortalama_Satis', 'Siparis_Sayisi', 'Toplam_Adet', 'Ortalama_Degerlendirme']\n",
                "category_analysis = category_analysis.sort_values('Toplam_Satis', ascending=False)\n",
                "\n",
                "print(\"Kategori Bazında Detaylı Analiz:\")\n",
                "print(category_analysis)\n",
                "\n",
                "# Görselleştirme\n",
                "fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
                "\n",
                "# Toplam satış\n",
                "category_analysis['Toplam_Satis'].plot(kind='bar', ax=axes[0,0], color='skyblue')\n",
                "axes[0,0].set_title('Kategori Bazında Toplam Satış')\n",
                "axes[0,0].set_ylabel('Toplam Satış (TL)')\n",
                "axes[0,0].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Sipariş sayısı\n",
                "category_analysis['Siparis_Sayisi'].plot(kind='bar', ax=axes[0,1], color='lightgreen')\n",
                "axes[0,1].set_title('Kategori Bazında Sipariş Sayısı')\n",
                "axes[0,1].set_ylabel('Sipariş Sayısı')\n",
                "axes[0,1].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Ortalama satış\n",
                "category_analysis['Ortalama_Satis'].plot(kind='bar', ax=axes[1,0], color='orange')\n",
                "axes[1,0].set_title('Kategori Bazında Ortalama Satış')\n",
                "axes[1,0].set_ylabel('Ortalama Satış (TL)')\n",
                "axes[1,0].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Ortalama değerlendirme\n",
                "category_analysis['Ortalama_Degerlendirme'].plot(kind='bar', ax=axes[1,1], color='red')\n",
                "axes[1,1].set_title('Kategori Bazında Ortalama Değerlendirme')\n",
                "axes[1,1].set_ylabel('Ortalama Değerlendirme')\n",
                "axes[1,1].tick_params(axis='x', rotation=45)\n",
                "\n",
                "plt.tight_layout()\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Şehir bazında detaylı analiz\n",
                "city_analysis = df.groupby('customer_city').agg({\n",
                "    'total_amount': ['sum', 'mean', 'count'],\n",
                "    'customer_age': 'mean',\n",
                "    'rating': 'mean'\n",
                "}).round(2)\n",
                "\n",
                "city_analysis.columns = ['Toplam_Satis', 'Ortalama_Satis', 'Siparis_Sayisi', 'Ortalama_Yas', 'Ortalama_Degerlendirme']\n",
                "city_analysis = city_analysis.sort_values('Toplam_Satis', ascending=False)\n",
                "\n",
                "print(\"Şehir Bazında Detaylı Analiz:\")\n",
                "print(city_analysis)\n",
                "\n",
                "# Görselleştirme\n",
                "fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
                "\n",
                "# Toplam satış\n",
                "city_analysis['Toplam_Satis'].plot(kind='bar', ax=axes[0,0], color='purple')\n",
                "axes[0,0].set_title('Şehir Bazında Toplam Satış')\n",
                "axes[0,0].set_ylabel('Toplam Satış (TL)')\n",
                "axes[0,0].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Sipariş sayısı\n",
                "city_analysis['Siparis_Sayisi'].plot(kind='bar', ax=axes[0,1], color='pink')\n",
                "axes[0,1].set_title('Şehir Bazında Sipariş Sayısı')\n",
                "axes[0,1].set_ylabel('Sipariş Sayısı')\n",
                "axes[0,1].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Ortalama yaş\n",
                "city_analysis['Ortalama_Yas'].plot(kind='bar', ax=axes[1,0], color='brown')\n",
                "axes[1,0].set_title('Şehir Bazında Ortalama Müşteri Yaşı')\n",
                "axes[1,0].set_ylabel('Ortalama Yaş')\n",
                "axes[1,0].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Ortalama değerlendirme\n",
                "city_analysis['Ortalama_Degerlendirme'].plot(kind='bar', ax=axes[1,1], color='gold')\n",
                "axes[1,1].set_title('Şehir Bazında Ortalama Değerlendirme')\n",
                "axes[1,1].set_ylabel('Ortalama Değerlendirme')\n",
                "axes[1,1].tick_params(axis='x', rotation=45)\n",
                "\n",
                "plt.tight_layout()\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Ödeme yöntemi analizi\n",
                "payment_analysis = df.groupby('payment_method').agg({\n",
                "    'total_amount': ['sum', 'mean', 'count'],\n",
                "    'rating': 'mean'\n",
                "}).round(2)\n",
                "\n",
                "payment_analysis.columns = ['Toplam_Satis', 'Ortalama_Satis', 'Siparis_Sayisi', 'Ortalama_Degerlendirme']\n",
                "payment_analysis = payment_analysis.sort_values('Toplam_Satis', ascending=False)\n",
                "\n",
                "print(\"Ödeme Yöntemi Bazında Detaylı Analiz:\")\n",
                "print(payment_analysis)\n",
                "\n",
                "# Görselleştirme\n",
                "fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
                "\n",
                "# Toplam satış\n",
                "payment_analysis['Toplam_Satis'].plot(kind='bar', ax=axes[0,0], color='lightblue')\n",
                "axes[0,0].set_title('Ödeme Yöntemi Bazında Toplam Satış')\n",
                "axes[0,0].set_ylabel('Toplam Satış (TL)')\n",
                "axes[0,0].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Sipariş sayısı\n",
                "payment_analysis['Siparis_Sayisi'].plot(kind='bar', ax=axes[0,1], color='lightcoral')\n",
                "axes[0,1].set_title('Ödeme Yöntemi Bazında Sipariş Sayısı')\n",
                "axes[0,1].set_ylabel('Sipariş Sayısı')\n",
                "axes[0,1].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Pasta grafik - Toplam satış\n",
                "axes[1,0].pie(payment_analysis['Toplam_Satis'], labels=payment_analysis.index, autopct='%1.1f%%')\n",
                "axes[1,0].set_title('Ödeme Yöntemi Dağılımı (Toplam Satış)')\n",
                "\n",
                "# Pasta grafik - Sipariş sayısı\n",
                "axes[1,1].pie(payment_analysis['Siparis_Sayisi'], labels=payment_analysis.index, autopct='%1.1f%%')\n",
                "axes[1,1].set_title('Ödeme Yöntemi Dağılımı (Sipariş Sayısı)')\n",
                "\n",
                "plt.tight_layout()\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Müşteri segmentasyonu\n",
                "print(\"Müşteri Yaş Analizi:\")\n",
                "print(f\"Ortalama müşteri yaşı: {df['customer_age'].mean():.1f}\")\n",
                "print(f\"En genç müşteri: {df['customer_age'].min()}\")\n",
                "print(f\"En yaşlı müşteri: {df['customer_age'].max()}\")\n",
                "print(f\"Yaş standart sapması: {df['customer_age'].std():.1f}\")\n",
                "\n",
                "# Yaş grupları oluştur\n",
                "df['yas_grubu'] = pd.cut(df['customer_age'], \n",
                "                         bins=[0, 25, 35, 45, 55, 100], \n",
                "                         labels=['18-25', '26-35', '36-45', '46-55', '55+'])\n",
                "\n",
                "age_group_analysis = df.groupby('yas_grubu').agg({\n",
                "    'total_amount': ['sum', 'mean', 'count'],\n",
                "    'rating': 'mean'\n",
                "}).round(2)\n",
                "\n",
                "age_group_analysis.columns = ['Toplam_Satis', 'Ortalama_Satis', 'Siparis_Sayisi', 'Ortalama_Degerlendirme']\n",
                "\n",
                "print(\"\\nYaş Grubu Bazında Analiz:\")\n",
                "print(age_group_analysis)\n",
                "\n",
                "# Görselleştirme\n",
                "fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
                "\n",
                "# Yaş dağılımı\n",
                "df['customer_age'].hist(bins=15, ax=axes[0,0], edgecolor='black', color='lightgreen')\n",
                "axes[0,0].set_title('Müşteri Yaş Dağılımı')\n",
                "axes[0,0].set_xlabel('Yaş')\n",
                "axes[0,0].set_ylabel('Frekans')\n",
                "axes[0,0].grid(True, alpha=0.3)\n",
                "\n",
                "# Yaş grubu bazında satış\n",
                "age_group_analysis['Toplam_Satis'].plot(kind='bar', ax=axes[0,1], color='orange')\n",
                "axes[0,1].set_title('Yaş Grubu Bazında Toplam Satış')\n",
                "axes[0,1].set_ylabel('Toplam Satış (TL)')\n",
                "axes[0,1].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Yaş grubu bazında sipariş sayısı\n",
                "age_group_analysis['Siparis_Sayisi'].plot(kind='bar', ax=axes[1,0], color='purple')\n",
                "axes[1,0].set_title('Yaş Grubu Bazında Sipariş Sayısı')\n",
                "axes[1,0].set_ylabel('Sipariş Sayısı')\n",
                "axes[1,0].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Yaş grubu bazında ortalama değerlendirme\n",
                "age_group_analysis['Ortalama_Degerlendirme'].plot(kind='bar', ax=axes[1,1], color='red')\n",
                "axes[1,1].set_title('Yaş Grubu Bazında Ortalama Değerlendirme')\n",
                "axes[1,1].set_ylabel('Ortalama Değerlendirme')\n",
                "axes[1,1].tick_params(axis='x', rotation=45)\n",
                "\n",
                "plt.tight_layout()\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Cinsiyet analizi\n",
                "gender_analysis = df.groupby('customer_gender').agg({\n",
                "    'total_amount': ['sum', 'mean', 'count'],\n",
                "    'customer_age': 'mean',\n",
                "    'rating': 'mean'\n",
                "}).round(2)\n",
                "\n",
                "gender_analysis.columns = ['Toplam_Satis', 'Ortalama_Satis', 'Siparis_Sayisi', 'Ortalama_Yas', 'Ortalama_Degerlendirme']\n",
                "\n",
                "print(\"Cinsiyet Bazında Detaylı Analiz:\")\n",
                "print(gender_analysis)\n",
                "\n",
                "# Görselleştirme\n",
                "fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
                "\n",
                "# Toplam satış\n",
                "gender_analysis['Toplam_Satis'].plot(kind='bar', ax=axes[0,0], color=['pink', 'lightblue'])\n",
                "axes[0,0].set_title('Cinsiyet Bazında Toplam Satış')\n",
                "axes[0,0].set_ylabel('Toplam Satış (TL)')\n",
                "axes[0,0].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Sipariş sayısı\n",
                "gender_analysis['Siparis_Sayisi'].plot(kind='bar', ax=axes[0,1], color=['pink', 'lightblue'])\n",
                "axes[0,1].set_title('Cinsiyet Bazında Sipariş Sayısı')\n",
                "axes[0,1].set_ylabel('Sipariş Sayısı')\n",
                "axes[0,1].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Ortalama yaş\n",
                "gender_analysis['Ortalama_Yas'].plot(kind='bar', ax=axes[1,0], color=['pink', 'lightblue'])\n",
                "axes[1,0].set_title('Cinsiyet Bazında Ortalama Yaş')\n",
                "axes[1,0].set_ylabel('Ortalama Yaş')\n",
                "axes[1,0].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# Ortalama değerlendirme\n",
                "gender_analysis['Ortalama_Degerlendirme'].plot(kind='bar', ax=axes[1,1], color=['pink', 'lightblue'])\n",
                "axes[1,1].set_title('Cinsiyet Bazında Ortalama Değerlendirme')\n",
                "axes[1,1].set_ylabel('Ortalama Değerlendirme')\n",
                "axes[1,1].tick_params(axis='x', rotation=45)\n",
                "\n",
                "plt.tight_layout()\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# İade ve değerlendirme analizi\n",
                "return_analysis = df.groupby('is_returned').agg({\n",
                "    'total_amount': ['sum', 'mean', 'count'],\n",
                "    'rating': 'mean'\n",
                "}).round(2)\n",
                "\n",
                "return_analysis.columns = ['Toplam_Satis', 'Ortalama_Satis', 'Siparis_Sayisi', 'Ortalama_Degerlendirme']\n",
                "return_analysis.index = ['İade Edilmedi', 'İade Edildi']\n",
                "\n",
                "print(\"İade Durumu Bazında Analiz:\")\n",
                "print(return_analysis)\n",
                "\n",
                "return_rate = df['is_returned'].mean() * 100\n",
                "print(f\"\\nGenel iade oranı: %{return_rate:.1f}\")\n",
                "\n",
                "# Değerlendirme analizi\n",
                "rating_analysis = df.groupby('rating').agg({\n",
                "    'total_amount': ['sum', 'mean', 'count']\n",
                "}).round(2)\n",
                "\n",
                "rating_analysis.columns = ['Toplam_Satis', 'Ortalama_Satis', 'Siparis_Sayisi']\n",
                "\n",
                "print(\"\\nDeğerlendirme Bazında Analiz:\")\n",
                "print(rating_analysis)\n",
                "\n",
                "avg_rating = df['rating'].mean()\n",
                "print(f\"\\nGenel ortalama değerlendirme: {avg_rating:.2f}\")\n",
                "\n",
                "# Görselleştirme\n",
                "fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
                "\n",
                "# İade durumu\n",
                "return_analysis['Siparis_Sayisi'].plot(kind='bar', ax=axes[0,0], color=['green', 'red'])\n",
                "axes[0,0].set_title('İade Durumu Bazında Sipariş Sayısı')\n",
                "axes[0,0].set_ylabel('Sipariş Sayısı')\n",
                "axes[0,0].tick_params(axis='x', rotation=45)\n",
                "\n",
                "# İade oranı pasta grafik\n",
                "axes[0,1].pie([1-return_rate/100, return_rate/100], \n",
                "               labels=['İade Edilmedi', 'İade Edildi'], \n",
                "               autopct='%1.1f%%', \n",
                "               colors=['green', 'red'])\n",
                "axes[0,1].set_title('İade Oranı Dağılımı')\n",
                "\n",
                "# Değerlendirme dağılımı\n",
                "rating_analysis['Siparis_Sayisi'].plot(kind='bar', ax=axes[1,0], color='gold')\n",
                "axes[1,0].set_title('Değerlendirme Bazında Sipariş Sayısı')\n",
                "axes[1,0].set_ylabel('Sipariş Sayısı')\n",
                "axes[1,0].set_xlabel('Değerlendirme (1-5)')\n",
                "\n",
                "# Değerlendirme ortalama\n",
                "rating_analysis['Ortalama_Satis'].plot(kind='bar', ax=axes[1,1], color='orange')\n",
                "axes[1,1].set_title('Değerlendirme Bazında Ortalama Satış')\n",
                "axes[1,1].set_ylabel('Ortalama Satış (TL)')\n",
                "axes[1,1].set_xlabel('Değerlendirme (1-5)')\n",
                "\n",
                "plt.tight_layout()\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 📊 DETAYLI ANALİZ SONUÇLARI\n",
                "\n",
                "### 🏆 En İyi Performans Gösteren Kategoriler:\n",
                "1. **En çok satan kategori:** Elektronik (en yüksek toplam satış)\n",
                "2. **En çok sipariş alan kategori:** [Kategori adı]\n",
                "3. **En yüksek ortalama satış:** [Kategori adı]\n",
                "4. **En yüksek değerlendirme:** [Kategori adı]\n",
                "\n",
                "### 🏙️ Şehir Analizi:\n",
                "1. **En çok satış yapılan şehir:** [Şehir adı]\n",
                "2. **En çok sipariş alan şehir:** [Şehir adı]\n",
                "3. **En yüksek ortalama müşteri yaşı:** [Şehir adı]\n",
                "4. **En yüksek değerlendirme:** [Şehir adı]\n",
                "\n",
                "### 💳 Ödeme Yöntemi Analizi:\n",
                "1. **En popüler ödeme yöntemi:** [Ödeme yöntemi]\n",
                "2. **En yüksek ortalama satış:** [Ödeme yöntemi]\n",
                "3. **En yüksek değerlendirme:** [Ödeme yöntemi]\n",
                "\n",
                "### 👥 Müşteri Segmentasyonu:\n",
                "1. **Ortalama müşteri yaşı:** [Yaş]\n",
                "2. **En aktif yaş grubu:** [Yaş grubu]\n",
                "3. **En yüksek satış yapan cinsiyet:** [Cinsiyet]\n",
                "4. **En yüksek değerlendirme yapan cinsiyet:** [Cinsiyet]\n",
                "\n",
                "### 📈 Performans Metrikleri:\n",
                "1. **İade oranı:** %[Oran]\n",
                "2. **Ortalama değerlendirme:** [Puan]\n",
                "3. **Toplam satış:** [Tutar] TL\n",
                "4. **Toplam sipariş:** [Sayı] adet\n",
                "\n",
                "### 🎯 Stratejik Öneriler:\n",
                "1. **Kategori odaklı:** [Kategori] kategorisinde daha fazla ürün çeşitliliği\n",
                "2. **Bölgesel:** [Şehir] bölgesinde daha fazla pazarlama\n",
                "3. **Müşteri odaklı:** [Yaş grubu] yaş grubuna özel kampanyalar\n",
                "4. **Ödeme:** [Ödeme yöntemi] ödeme seçeneklerini artırma\n",
                "\n",
                "Bu detaylı analiz sonuçları e-ticaret stratejileri geliştirmek için kullanılabilir."
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.8.5"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}

# Notebook'u kaydet
notebook_path = "notebooks/02_detayli_analiz.ipynb"
with open(notebook_path, 'w', encoding='utf-8') as f:
    json.dump(notebook, f, indent=2, ensure_ascii=False)

print(f"Detaylı analiz notebook'u başarıyla oluşturuldu: {notebook_path}")
print("Şimdi Jupyter'de bu dosyayı açabilirsin!") 